[{"/mnt/c/Users/wendy/linked-list-lab-g-416/tic-tac-toe/src/App.js":"1","/mnt/c/Users/wendy/linked-list-lab-g-416/tic-tac-toe/src/reportWebVitals.js":"2"},{"size":2068,"mtime":1607529002758,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1607449548383,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"16sl69s",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/wendy/linked-list-lab-g-416/tic-tac-toe/src/App.js",["11"],"import React, {Component} from 'react'\nimport Board from './Board';\nimport Message from './Message'  \nimport './App.css';\n\nconst WIN_CONDITIONS = [\n  [0,1,2],\n  [0,4,8],\n  [0,3,6],\n  [1,4,7],\n  [2,5,8],\n  [2,4,6],\n  [3,4,5],\n  [6,7,8],\n];\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      board: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n      currentToken: \"X\",\n      turn: 0,\n      canPlay: true, \n    };\n  }\n\n  checkForWinner = (board) => {\n    let hasWon = false; \n\n    WIN_CONDITIONS.forEach(winCombo => {\n      const [firstIndex, secondIndex, thirdIndex] = winCombo;\n      const firstBoardPos = board[firstIndex];\n      const secondBoardPos = board[secondIndex];\n      const thirdBoardPos = board[thisIndex];\n\n      if (firstBoardPos === \"\" || secondBoardPos === \"\" || thirdBoardPos === \"\"){\n        return \n      }\n\n      const winCheckArray = [firstBoardPos, secondBoardPos, thirdBoardPos]\n\n      if (firstBoardPos === \"X\" && !winCheckArray.includes(\"0\")){\n        hasWon = true \n      }\n      \n      if (firstBoardPos === \"O\" && !winCheckArray.includes(\"X\")){\n        hasWon = true \n      }\n    })\n    return hasWon\n  }\n\n  handleClick = (cellIndex) => {\n    const { board, currentToken, turn } = this.state; \n\n    if (board[cellIndex] !== \"\"){\n      return \n    }\n\n    const cloneBoard = [...board]\n    cloneBoard[cellIndex] = currentToken;\n    \n    if (turn >= 4 && this.checkForWinner(cloneBoard)){\n    this.setState(() => ({\n        board: cloneBoard;\n        canPlay: false \n    }))\n    return \n  }\n\n  this.setState(() => ({\n    board: cloneBoard, \n    currentToken: currentToken === \"X\" ? \"O\" : \"X\", \n    turn: turn + 1 \n  }))\n  }\n\n  render(){\n    const {board, canPlay, currentToken } = this.state \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Tic-Tac-Toe \n      </header>\n    {!canPlay ? <Message winnerToken ={currentToken}/> : null}\n    <Board \n      gameBoard={board} \n      canPlay={canPlay}\n      handleClick={this.handleClick}\n    />\n    </div>\n  );\n}\n}\n\nexport default App;\n","/mnt/c/Users/wendy/linked-list-lab-g-416/tic-tac-toe/src/reportWebVitals.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"12","line":66,"column":26},"Parsing error: Unexpected token, expected \",\"\n\n  64 |     if (turn >= 4 && this.checkForWinner(cloneBoard)){\n  65 |     this.setState(() => ({\n> 66 |         board: cloneBoard;\n     |                          ^\n  67 |         canPlay: false \n  68 |     }))\n  69 |     return"]